{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Don't Touch","text":""},{"location":"#management-information-system","title":"Management Information System","text":""},{"location":"#core-module-ideas","title":"Core Module Ideas","text":"<ul> <li>LookButDon\u2019tTouch \u2013 Dashboard/view-only interface.</li> <li>TouchBase \u2013 Authentication &amp; user management.</li> <li>HandleWithCare \u2013 Configuration module.</li> <li>SlapTracker \u2013 Asset or task tracking.</li> <li>NoTouchyDB \u2013 Database engine.</li> <li>PokeMonitor \u2013 System monitoring/alerts.</li> <li>UntouchableOps \u2013 Automation &amp; scripts.</li> <li>SudoFinger \u2013 Admin override interface.</li> </ul>"},{"location":"#finance-module-name-ideas","title":"Finance Module Name Ideas","text":"<ul> <li>TouchMyMoney \u2013 Sarcastic and bold.</li> <li>FundsAreFine \u2013 The system says it\u2019s fine, you're broke.</li> <li>BrokePoint \u2013 Clever and accurate.</li> <li>Denarii \u2013 Old-school Roman money flex.</li> <li>CoinTroller \u2013 You control the coins (or they control you).</li> <li>PettyCash \u2013 For your not-so-petty empire.</li> <li>VaultOfDon\u2019t \u2013 Where your money lives and dies.</li> <li>RedInk \u2013 When it's bad, it's real bad.</li> <li>GreedGrid \u2013 For that Wall Street villain vibe.</li> <li>NoTouchBudget \u2013 You made it, don\u2019t mess it up.</li> </ul>"},{"location":"#coregeneral-ops","title":"\ud83e\udde0 Core/General Ops","text":"<ul> <li>DoerCore \u2013 Task scheduler and automation hub.</li> <li>EchoChamber \u2013 System logging and activity tracking.</li> <li>Override \u2013 Admin portal for everything, naturally dangerous.</li> <li>Don\u2019tFailOver \u2013 Backup and disaster recovery control panel.</li> <li>PanicButton \u2013 One-click script runner for emergencies.</li> </ul>"},{"location":"#device-system-management","title":"\ud83d\udda5\ufe0f Device &amp; System Management","text":"<ul> <li>HandsOffFleet \u2013 Device/inventory management (think Snipe-IT++ vibes).</li> <li>SocketSniffer \u2013 Network mapping and traffic sniffing.</li> <li>PatchMeNot \u2013 Update management (because you\u2019ll ignore it anyway).</li> <li>PowerTrip \u2013 Remote control and shutdowns.</li> <li>Diskaster \u2013 Storage usage monitor and SMART warnings.</li> </ul>"},{"location":"#maintenance-automation","title":"\ud83e\uddf0 Maintenance &amp; Automation","text":"<ul> <li>Cronicle \u2013 Job scheduler and logging.</li> <li>Scriptonite \u2013 Script management/repository with execution buttons.</li> <li>FixItFairy \u2013 Self-healing tasks and remediations.</li> <li>DriftAway \u2013 Configuration drift detection.</li> <li>Bleach.bat \u2013 Cleanup tools (disk, logs, temp, etc.).</li> </ul>"},{"location":"#personalwork-life-ops","title":"\ud83d\udc64 Personal/Work-Life Ops","text":"<ul> <li>TimeIsFake \u2013 Time tracking and productivity logs.</li> <li>NagCenter \u2013 Reminders, alerts, and guilt machine.</li> <li>InboxZeroOrDie \u2013 Email automation, rules, and sorting.</li> <li>MoodBoardroom \u2013 Journal, notes, or mental health tracker.</li> <li>StatusQuo \u2013 Current state dashboard for life and tech.</li> </ul>"},{"location":"#security-access","title":"\ud83d\udee1\ufe0f Security &amp; Access","text":"<ul> <li>Lockjaw \u2013 2FA, key vault, and secrets manager.</li> <li>Don\u2019tLookHere \u2013 Encrypted file storage.</li> <li>AccessDenied \u2013 Permission management.</li> <li>ParanoiaLevel \u2013 Threat monitoring and alerts.</li> <li>NoPhish \u2013 Email header analyzer and scam filter.</li> </ul>"},{"location":"api/","title":"Nexus API","text":""},{"location":"faq/","title":"Frequently Asked Questiosn","text":""},{"location":"introduction/","title":"Introduction","text":""},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"classes/models/","title":"Model","text":""},{"location":"classes/models/#uml-diagram","title":"UML Diagram","text":"<pre>9cbcab8a-0188-4c95-bc9e-8c6400db64ec</pre><pre>ab69c536-f30a-464b-bb43-c35e6eb4d036-dark</pre>"},{"location":"classes/models/#classes","title":"Classes","text":""},{"location":"classes/models/#enumerations","title":"Enumerations","text":""},{"location":"configuration/configuring_nexus/","title":"Configuring Nexus","text":""},{"location":"contributing/","title":"\ud83e\uddd1\u200d\ud83d\udcbb Developer Introduction","text":""},{"location":"contributing/#system-architecture","title":"System Architecture","text":"<p>Nexus includes a core set of projects:  - FastAPI with SQLAlchemy for RESTful API and database interfacing  - React for frontend web  - Swift for Apple platforms.</p>"},{"location":"contributing/#setting-up-the-development-environment","title":"Setting up the development environment","text":""},{"location":"contributing/#creating-and-activating-a-python-virtual-environment","title":"Creating and Activating a Python Virtual Environment","text":"<p>To set up a Python virtual environment for the project, follow these steps:</p> <ol> <li> <p>Create the virtual environment:     <pre><code>python3 -m venv .venv\n</code></pre></p> </li> <li> <p>Activate the virtual environment:</p> <ul> <li>On macOS/Linux:   <pre><code>source .venv/bin/activate\n</code></pre></li> <li>On Windows:   <pre><code>.venv\\Scripts\\activate\n</code></pre></li> </ul> </li> <li> <p>Once activated, your terminal prompt should change to indicate that the virtual environment is active. You can now install the required dependencies using:     <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Install development requirements:     <pre><code>pip install -r requirements-dev.txt\n</code></pre></p> </li> </ol>"},{"location":"contributing/#setup-plantuml-server","title":"Setup PlantUML Server","text":"<p>brew install openjdk sudo ln -sfn $(brew --prefix openjdk)/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk curl -L -o plantuml-server.jar https://github.com/plantuml/plantuml-server/releases/latest/download/plantuml-server.jar java -jar plantuml-server.jar</p>"},{"location":"contributing/#root-folders","title":"Root Folders","text":"Folder Description <code>.github</code> GitHub-specific configurations and workflows for CI/CD. <code>.venv</code> Virtual environment for Python dependencies. <code>.vscode</code> VS Code-specific settings and configurations. <code>alembic</code> Database migration scripts and configurations. <code>docs</code> Documentation for developers, deployment, and user guides. <code>darwin</code> Swift-based application for Apple platforms. <code>fastapi</code> Backend API built with FastAPI and SQLAlchemy. <code>react</code> React-based frontend web application. <code>tests</code> Test cases for various components of the project."},{"location":"contributing/#root-files","title":"Root Files","text":"File Path Description <code>.flake8</code> Configuration file for the flake8 linter. <code>.gitattributes</code> Git configuration file for defining attributes of files in the repository. <code>.gitignore</code> Specifies files and directories to be ignored by Git. <code>alembic.ini</code> Configuration file for Alembic database migrations. <code>CHANGELOG.md</code> A log of changes made to the project over time. <code>justfile</code> Commonly used commands for development and project management. <code>LICENSE</code> The license under which the project is distributed. <code>mkdocs.yml</code> Configuration file for MkDocs documentation site. <code>package-lock.json</code> Automatically generated file for locking Node.js dependencies. <code>package.json</code> Node.js dependencies and scripts for the React frontend. <code>pyproject.toml</code> Python project configuration and metadata. <code>README.md</code> The main README file for the project. <code>requirements-dev.txt</code> Python dependencies for development purposes. <code>requirements.txt</code> Python dependencies for the project. <code>yarn.lock</code> Dependency lock file for Yarn package manager. <p>Folder structure and conventions How to run locally (e.g., Docker, npm install, uvicorn main:app) How React talks to FastAPI (e.g., API base URLs, auth) Testing setup (React Testing Library, pytest, etc.) Code style, linting, and pre-commit hooks Useful scripts/aliases</p> <p>Setting Up the Development Environment: Instructions for cloning the repo, installing dependencies, and running the project locally. Codebase Overview: Explain the structure of the codebase (e.g., nexus-react, nexus-fastapi, nexus-docs). API Documentation: Include details about REST/GraphQL APIs. Contributing Guidelines: Explain how to contribute to the project.</p>"},{"location":"contributing/#models-documentation","title":"Models Documentation","text":"<p>For detailed information about the models used in the project, refer to the Models Documentation.</p>"},{"location":"contributing/#sample-data","title":"Sample Data","text":"<p>Sample data is stored in the <code>data</code> folder. If you need to store sample data that should not be tracked by Git, use the <code>data.local</code> folder, which is included in <code>.gitignore</code>.</p>"},{"location":"contributing/#contributing","title":"Contributing","text":"<ul> <li>Follow the project's coding standards and guidelines.</li> <li>Submit pull requests for any changes or new features.</li> </ul>"},{"location":"contributing/darwin/","title":"Apple iOS App","text":""},{"location":"contributing/darwin/#overview","title":"Overview","text":"<p>This document provides an overview of the Swift-based iOS application included in the Nexus project. The app is designed for Apple platforms and serves as a mobile interface for interacting with the Nexus backend services.</p>"},{"location":"contributing/darwin/#project-structure","title":"Project Structure","text":"Folder/File Path Description <code>nexus/</code> Contains the main Swift application files. <code>nexus/ContentView.swift</code> The main view of the application. <code>nexus/Item.swift</code> Data model for representing items in the app. <code>nexus/nexusApp.swift</code> The entry point of the Swift application. <code>nexus/Assets.xcassets/</code> Asset catalog for managing images, colors, and app icons. <code>nexus/Preview Content/</code> Preview assets for SwiftUI previews. <code>nexus.xcodeproj/</code> Xcode project configuration files."},{"location":"contributing/darwin/#key-features","title":"Key Features","text":"<ul> <li>SwiftUI: The app uses SwiftUI for building user interfaces.</li> <li>REST API Integration: Communicates with the FastAPI backend using RESTful APIs.</li> <li>Data Models: Includes models for handling data received from the backend.</li> <li>Asset Management: Manages app icons, colors, and other assets in <code>Assets.xcassets</code>.</li> </ul>"},{"location":"contributing/darwin/#development-setup","title":"Development Setup","text":"<ol> <li>Requirements:</li> <li>Xcode (latest version recommended).</li> <li>macOS (latest version recommended).</li> <li>Steps:</li> <li>Open the <code>nexus.xcodeproj</code> file in Xcode.</li> <li>Build and run the project using the Xcode simulator or a connected iOS device.</li> </ol>"},{"location":"contributing/darwin/#api-integration","title":"API Integration","text":"<p>The app communicates with the FastAPI backend using RESTful APIs. Ensure the backend is running and accessible before testing the app.</p>"},{"location":"contributing/darwin/#testing","title":"Testing","text":"<ul> <li>Use Xcode's built-in testing tools to write and run unit tests for the app.</li> <li>Add test cases for UI components and API integrations.</li> </ul>"},{"location":"contributing/darwin/#deployment","title":"Deployment","text":"<ul> <li>Configure the app's deployment settings in Xcode.</li> <li>Use Xcode's tools to archive and distribute the app to the App Store or TestFlight.</li> </ul>"},{"location":"contributing/darwin/#contributing","title":"Contributing","text":"<ul> <li>Follow the project's coding standards and guidelines.</li> <li>Submit pull requests for any changes or new features.</li> </ul>"},{"location":"contributing/darwin/#additional-resources","title":"Additional Resources","text":"<ul> <li>Swift Documentation</li> <li>SwiftUI Documentation</li> <li>Xcode Documentation</li> </ul>"},{"location":"contributing/fastapi/","title":"FastAPI","text":""},{"location":"contributing/fastapi/#overview","title":"Overview","text":"<p>This document provides an overview of the FastAPI backend included in the Nexus project. The backend is responsible for handling API requests, managing the database, and serving as the core of the application.</p>"},{"location":"contributing/fastapi/#project-structure","title":"Project Structure","text":"Folder/File Path Description <code>fastapi/</code> Contains the main FastAPI application files. <code>fastapi/main.py</code> Entry point for the FastAPI application. <code>fastapi/config.py</code> Configuration settings for the application. <code>fastapi/controllers.py</code> API route handlers for various endpoints. <code>fastapi/database.py</code> Database connection and session management. <code>fastapi/models.py</code> SQLAlchemy models for database tables. <code>fastapi/schemas.py</code> Pydantic schemas for request and response validation. <code>fastapi/assets/</code> Contains additional modules for assets-related functionality."},{"location":"contributing/fastapi/#key-features","title":"Key Features","text":"<ul> <li>FastAPI Framework: High-performance web framework for building APIs.</li> <li>SQLAlchemy Integration: ORM for database interactions.</li> <li>Pydantic Validation: Data validation and serialization using Pydantic.</li> <li>Modular Design: Organized into controllers, models, schemas, and services.</li> </ul>"},{"location":"contributing/fastapi/#development-setup","title":"Development Setup","text":"<ol> <li>Requirements:</li> <li>Python 3.9 or higher.</li> <li>Virtual environment (recommended).</li> <li>Steps:</li> <li>Install dependencies: <code>pip install -r requirements.txt</code>.</li> <li>Run the application: <code>uvicorn fastapi.main:app --reload</code>.</li> </ol>"},{"location":"contributing/fastapi/#api-endpoints","title":"API Endpoints","text":"<ul> <li>Users: Manage user accounts and authentication.</li> <li>Devices: Handle device-related operations.</li> <li>Documents: Manage document storage and retrieval.</li> <li>Network: Network-related functionalities.</li> <li>Software: Software-related operations.</li> </ul>"},{"location":"contributing/fastapi/#api-documentation","title":"API Documentation","text":"<ul> <li>Swagger UI: Available at <code>/docs</code> for interactive API exploration.</li> <li>ReDoc: Available at <code>/redoc</code> for detailed API documentation.</li> </ul>"},{"location":"contributing/fastapi/#testing","title":"Testing","text":"<ul> <li>Use <code>pytest</code> for running test cases.</li> <li>Test files are located in the <code>tests/fastapi/</code> directory.</li> </ul>"},{"location":"contributing/fastapi/#deployment","title":"Deployment","text":"<ul> <li>Use a production-ready ASGI server like <code>uvicorn</code> or <code>gunicorn</code>.</li> <li>Configure environment variables for production settings.</li> </ul>"},{"location":"contributing/fastapi/#additional-resources","title":"Additional Resources","text":"<ul> <li>FastAPI Documentation</li> <li>SQLAlchemy Documentation</li> <li>Pydantic Documentation</li> </ul>"},{"location":"contributing/react/","title":":fontawesome-solid-atom: React","text":""},{"location":"contributing/react/#overview","title":"Overview","text":"<p>This document provides an overview of the React-based frontend application included in the Nexus project. The frontend serves as the user interface for interacting with the Nexus backend services.</p>"},{"location":"contributing/react/#project-structure","title":"Project Structure","text":"Folder/File Path Description <code>react/</code> Contains the main React application files. <code>react/public/</code> Static files such as <code>index.html</code> and icons. <code>react/src/</code> Source code for the React application. <code>react/src/components/</code> Reusable React components. <code>react/src/services/</code> API service files for interacting with the backend. <code>react/src/App.js</code> Main application component. <code>react/src/index.js</code> Entry point for the React application. <code>react/package.json</code> Node.js dependencies and scripts for the React application."},{"location":"contributing/react/#key-features","title":"Key Features","text":"<ul> <li>React Framework: Component-based architecture for building user interfaces.</li> <li>API Integration: Communicates with the FastAPI backend using RESTful APIs.</li> <li>Reusable Components: Modular and reusable UI components.</li> <li>State Management: Uses React's built-in state management or external libraries if applicable.</li> </ul>"},{"location":"contributing/react/#development-setup","title":"Development Setup","text":"<ol> <li>Requirements:</li> <li>Node.js (latest LTS version recommended).</li> <li>npm or Yarn package manager.</li> <li>Steps:</li> <li>Navigate to the <code>react/</code> directory.</li> <li>Install dependencies: <code>npm install</code> or <code>yarn install</code>.</li> <li>Start the development server: <code>npm start</code> or <code>yarn start</code>.</li> </ol>"},{"location":"contributing/react/#api-integration","title":"API Integration","text":"<p>The React application communicates with the FastAPI backend using RESTful APIs. Ensure the backend is running and accessible before testing the frontend.</p>"},{"location":"contributing/react/#testing","title":"Testing","text":"<ul> <li>Use <code>React Testing Library</code> and <code>Jest</code> for writing and running test cases.</li> <li>Test files are located in the <code>react/src/</code> directory, typically alongside the components being tested.</li> </ul>"},{"location":"contributing/react/#deployment","title":"Deployment","text":"<ul> <li>Build the application for production: <code>npm run build</code> or <code>yarn build</code>.</li> <li>Deploy the contents of the <code>build/</code> directory to a web server or hosting service.</li> </ul>"},{"location":"contributing/react/#contributing","title":"Contributing","text":"<ul> <li>Follow the project's coding standards and guidelines.</li> <li>Submit pull requests for any changes or new features.</li> </ul>"},{"location":"contributing/react/#additional-resources","title":"Additional Resources","text":"<ul> <li>React Documentation</li> <li>React Testing Library</li> <li>Jest Documentation</li> </ul>"},{"location":"installation/architecture/","title":"Architecture","text":""},{"location":"installation/architecture/#installation","title":"Installation","text":"<p>Environment variables (clearly documented and what they do) Docker setup / CI/CD notes How to set up backend (Postgres, Redis, whatever you use) Static file handling for React (CDN? Served by FastAPI?) Secrets handling, logging, and monitoring Rollback instructions</p> <p>Installation: Step-by-step guide for installing the system. Configuration: Explain configuration options (e.g., .env files, database setup). Scaling and Performance: Tips for scaling the system in production. Backup and Recovery: Instructions for backing up and restoring data.</p>"},{"location":"installation/architecture/#sample-data","title":"Sample Data","text":"<p>Sample data is stored in the <code>data</code> folder. If you need to store sample data that should not be tracked by Git, use the <code>data.local</code> folder, which is included in <code>.gitignore</code>.</p>"},{"location":"installation/docker_builds/","title":"Docker Builds","text":""},{"location":"installation/docker_compose/","title":"Docker Compose","text":""},{"location":"installation/installation_methods/","title":"Installation Methods","text":""},{"location":"installation/kubernetes/","title":"Kubernetes","text":""},{"location":"installation/pypi/","title":"PyPi","text":""},{"location":"installation/upgrading/","title":"Upgrading Nexus","text":""},{"location":"models/activity/","title":"Activity Model","text":""},{"location":"models/activity/#uml-diagram","title":"UML Diagram","text":"<pre>76f93b53-0935-4f82-9bf7-fd146d5671fe</pre><pre>a6b87dc9-b186-40f8-850c-50843cb27b9b-dark</pre>"},{"location":"models/activity/#field-descriptions","title":"Field Descriptions","text":"<ul> <li> <p>id: A unique identifier for the audit record.</p> </li> <li> <p>timestamp: The exact time the action occurred.</p> </li> <li>requestor_id: A foreign key linking to the User who performed the action.</li> <li>requestor_ip: The IP address of the client making the request.</li> <li>url: The URL or endpoint accessed.</li> <li>method: The HTTP method used (e.g., <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>).</li> <li>payload: The payload sent with the request (if applicable).</li> <li> <p>return_status: The HTTP status code returned (e.g., <code>200</code>, <code>404</code>, <code>500</code>).</p> </li> <li> <p>entity_id: The ID of the entity being acted upon.</p> </li> <li>entity_type: The type of entity being acted upon (e.g., <code>User</code>, <code>Order</code>, <code>Product</code>).</li> </ul>"},{"location":"models/users/","title":"Users","text":"<pre>e5e3ff1e-7f18-438c-9b3b-c8066be55016</pre><pre>219e836b-96f5-43a2-991b-3af61bd0f87d-dark</pre>"},{"location":"models/users/#overview","title":"Overview","text":"<p>The User model is a fundamental part of the application, representing the core attributes and relationships of a user in the system. It is used across various domains and services to manage user-related data and operations.</p>"},{"location":"models/users/#definitions","title":"Definitions","text":"<p>The <code>enabled</code> or <code>disabled</code> state of a user determines whether the user has access to the system. This state is typically managed through the <code>is_active</code> field in the User model.</p> <ul> <li>Enabled: When <code>is_active</code> is set to <code>true</code>, the user account is active and can interact with the system.</li> <li>Disabled: When <code>is_active</code> is set to <code>false</code>, the user account is inactive and cannot access the system.</li> </ul> <p>This field is crucial for managing user access without permanently deleting user data.</p>"},{"location":"models/users/#fields","title":"Fields","text":"<p>The User model includes the following fields:</p> Field Type Description \ud83d\udd11id Integer A unique identifier for the user. guid UUID A globally unique identifier for the user. username String A unique string representing the user's login name. password String A hashed representation of the user's password for secure storage. enabled_at DateTime The timestamp when the user was enabled. enabled_by String The identifier of the user or system that enabled this user. disabled_at DateTime The timestamp when the user was disabled. disabled_by String The identifier of the user or system that disabled this user. <p>For auditing-related fields (event_at, event_by), refer to the AuditMixIn model.</p>"},{"location":"models/users/#properties","title":"Properties","text":"Property Type Description is_enabled <code>bool</code> Getter: Returns <code>True</code> if the user is enabled (i.e., <code>enabled_at</code> is not <code>None</code> and either <code>disabled_at</code> is <code>None</code> or <code>disabled_at</code> is earlier than <code>enabled_at</code>). password <code>str</code> Getter: Returns the hashed password.Setter: Hashes the raw password using Argon2 and stores it securely."},{"location":"models/users/#methods","title":"Methods","text":"Method Type Description verify_password <code>bool</code> Method: Accepts a raw password and verifies it against the stored hashed password using Argon2."},{"location":"models/users/#notes","title":"Notes","text":"<ul> <li>Ensure that sensitive information, such as passwords, is always stored securely using hashing algorithms like bcrypt.</li> <li>Use proper validation and constraints to maintain data integrity.</li> <li>Regularly update and audit the model to ensure it meets the application's evolving requirements.</li> </ul>"},{"location":"security/cves_fixed_by_release/","title":"CVEs Fixed by Release","text":""},{"location":"security/security_configurations/","title":"Security Configurations","text":""},{"location":"using_nexus/","title":"\ud83e\uddcd User Guide","text":"<p>What the app does in plain English How to access it (web, mobile, etc.) Screenshots/gifs if possible Troubleshooting section FAQ</p> <p>Navigating the Interface: Include screenshots and walkthroughs. Key Features: Explain how to use core features like dashboards, reports, etc. Troubleshooting: Provide solutions to common user issues.</p>"}]}